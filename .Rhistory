library(gplots)
library(Seurat)
library(parallel)
# fix for ArchR - may not be needed in later versions
source('./R/20200708_filter_doublets_archr_fix.R')
# import kite counts from Caleb Lareau
source('./R/import_kite_counts.R')
addArchRGenome('hg38')
MART1.asap = loadArchRProject('./data/mixing/MART1/MART1.asap/')
### read TSA data
TSA.mat.all = matrix()
ADT.data = data.frame()
for (s in sort(unique(MART1.asap$Sample))) {
cellnames = stringr::str_split_fixed(MART1.asap$cellNames[which(MART1.asap$Sample == s)], pattern = '#', n=2)[,2]
cellnames = gsub(pattern = '-1', replacement = '', cellnames)
TSA.mat=import_kite_counts2(paste0('./data/',s,'.asap/TSA/featurecounts/'))
TSA.mat = TSA.mat[,which(colnames(TSA.mat) %in% cellnames)]
TSA.so = CreateSeuratObject(TSA.mat, assay = 'tetramer')
TSA.so <- NormalizeData(TSA.so, assay = "tetramer", normalization.method = "CLR")
TSA.so <- ScaleData(TSA.so, assay = "tetramer")
boo=as.data.frame(t(GetAssayData(TSA.so)))
rownames(boo) = paste0(s, '#', rownames(boo), '-1')
colnames(TSA.mat) = paste0(s, '#', colnames(TSA.mat))
if (s == 'MART1_1') {
ADT.data = boo
TSA.mat.all = TSA.mat
} else {
TSA.mat.all = cbind(TSA.mat.all, as.matrix(TSA.mat))
for (c in setdiff(colnames(ADT.data), colnames(boo))) {
if (!c %in% colnames(ADT.data)) {
ADT.data[,c] = NA
}
if (!c %in% colnames(boo)) {
boo[,c] = NA
}
}
ADT.data = rbind(ADT.data, boo)
}
}
for (s in sort(unique(MART1.asap$Sample))) {
cellnames = stringr::str_split_fixed(MART1.asap$cellNames[which(MART1.asap$Sample == s)], pattern = '#', n=2)[,2]
cellnames = gsub(pattern = '-1', replacement = '', cellnames)
TSA.mat=import_kite_counts2(paste0('./data/mixing/MART1/',s,'.asap/TSA/featurecounts/'))
TSA.mat = TSA.mat[,which(colnames(TSA.mat) %in% cellnames)]
TSA.so = CreateSeuratObject(TSA.mat, assay = 'tetramer')
TSA.so <- NormalizeData(TSA.so, assay = "tetramer", normalization.method = "CLR")
TSA.so <- ScaleData(TSA.so, assay = "tetramer")
boo=as.data.frame(t(GetAssayData(TSA.so)))
rownames(boo) = paste0(s, '#', rownames(boo), '-1')
colnames(TSA.mat) = paste0(s, '#', colnames(TSA.mat))
if (s == 'MART1_1') {
ADT.data = boo
TSA.mat.all = TSA.mat
} else {
TSA.mat.all = cbind(TSA.mat.all, as.matrix(TSA.mat))
for (c in setdiff(colnames(ADT.data), colnames(boo))) {
if (!c %in% colnames(ADT.data)) {
ADT.data[,c] = NA
}
if (!c %in% colnames(boo)) {
boo[,c] = NA
}
}
ADT.data = rbind(ADT.data, boo)
}
}
for (cell in MART1.asap$cellNames[which(!MART1.asap$cellNames %in% rownames(ADT.data))]) {
ADT.data[nrow(ADT.data)+1,] = 0
rownames(ADT.data)[nrow(ADT.data)] = cell
}
for (protein in colnames(ADT.data)) {
MART1.asap = addCellColData(MART1.asap, data = ADT.data[,protein], cells = paste0(rownames(ADT.data),''), name = protein)
}
### read TSB data
ADT.data = data.frame()
for (s in sort(unique(MART1.asap$Sample))) {
cellnames = stringr::str_split_fixed(MART1.asap$cellNames[which(MART1.asap$Sample == s)], pattern = '#', n=2)[,2]
cellnames = gsub(pattern = '-1', replacement = '', cellnames)
TSB.mat=import_kite_counts(paste0('./data/mixing/MART1/',s,'.asap/TSB/featurecounts/'))
TSB.mat=TSB.mat[,which(colnames(TSB.mat) %in% cellnames)]
TSB.so = CreateSeuratObject(TSB.mat, assay = 'ADT')
TSB.so <- NormalizeData(TSB.so, assay = "ADT", normalization.method = 'CLR', margin = 2)
TSB.so = ScaleData(TSB.so)
boo = as.data.frame(t(GetAssayData(TSB.so)))
rownames(boo) = paste0(s,'#',rownames(boo))
colnames(TSB.mat) = paste0(s,'#',colnames(TSB.mat))
if (s == 'MART1_1') {
ADT.data = boo
ADT.mat = TSB.mat
TSB.mat.all = TSB.mat
} else {
ADT.data = rbind(ADT.data, boo)
ADT.mat = cbind(ADT.mat, TSB.mat)
TSB.mat.all = cbind(TSB.mat.all, TSB.mat)
}
}
TSB.so = CreateSeuratObject(ADT.mat, assay = 'ADT')
TSB.so <- NormalizeData(TSB.so, assay = "ADT", normalization.method = 'CLR', margin = 2)
TSB.so = ScaleData(TSB.so)
TSB.so = FindVariableFeatures(TSB.so)
TSB.so = RunPCA(TSB.so)
TSB.so = RunUMAP(TSB.so, dims = 1:20)
TSB.so = FindNeighbors(TSB.so)
TSB.so = FindClusters(TSB.so)
TSB.so = RenameCells(TSB.so, new.names = paste0(colnames(TSB.so), '-1'))
combined.mutation.frequencies = readRDS('./data/mixing/MART1/mtDNA/20211030_MART1_combined_mutation_frequencies.rds')
MART1.mito = loadArchRProject('./data/mixing/MART1/MART1.mito/')
# find relevant maternal mtDNA mutations
boo = MART1.mito$cellNames[which(MART1.mito$Clusters == 'C7')]
mtDNA.108 = names(which(rowMeans(combined.mutation.frequencies[,boo]) > 0.9))
boo = MART1.mito$cellNames[which(MART1.mito$Clusters == 'C9')]
mtDNA.5 = names(which(rowMeans(combined.mutation.frequencies[,boo]) > 0.9))
boo = data.frame(mtDNA.108 = colMeans(combined.mutation.frequencies[mtDNA.108,]),
mtDNA.5 = colMeans(combined.mutation.frequencies[mtDNA.5,]))
View(boo)
cells.108 = rownames(boo[which(boo$mtDNA.108 > 0.8 & boo$mtDNA.5 < 0.2),])
cells.5 = rownames(boo[which(boo$mtDNA.108 < 0.2 & boo$mtDNA.5 > 0.8),])
doublets = rownames(boo[which(boo$mtDNA.108 > 0.8 & boo$mtDNA.5 < 0.8),])
unassigned = rownames(boo)[which(!rownames(boo) %in% c(cells.108, cells.5, doublets))]
ggplot() +
ggrastr::rasterize(geom_point(data=boo[which(!rownames(boo) %in% c(cells.5, cells.108)),],
aes(x=100*mtDNA.5, y=100*mtDNA.108), size=0.5, color='grey'), dpi=600) +
ggrastr::rasterize(geom_point(data=boo[which(rownames(boo) %in% c(cells.5)),],
aes(x=100*mtDNA.5, y=100*mtDNA.108), size=0.5, color='purple'), dpi=600) +
ggrastr::rasterize(geom_point(data=boo[which(rownames(boo) %in% c(cells.108)),],
aes(x=100*mtDNA.5, y=100*mtDNA.108), size=0.5, color='orange'), dpi=600) +
scale_x_continuous('% donor 2') +
scale_y_continuous('% donor 1') +
geom_vline(xintercept = c(20, 80), color='black') +
geom_hline(yintercept = c(20, 80), color='black') +
theme_classic() +
theme(axis.title = element_text('Arial', size=10, color='black'),
axis.text = element_text('Arial', size=10, color='black'))
ggsave('./figure_mixing/MART1/figures/20230518_mtDNA_donor1_donor2.svg', width = 1.5, height = 1.5, plot = p)
p=ggplot() +
ggrastr::rasterize(geom_point(data=boo[which(!rownames(boo) %in% c(cells.5, cells.108)),],
aes(x=100*mtDNA.5, y=100*mtDNA.108), size=0.5, color='grey'), dpi=600) +
ggrastr::rasterize(geom_point(data=boo[which(rownames(boo) %in% c(cells.5)),],
aes(x=100*mtDNA.5, y=100*mtDNA.108), size=0.5, color='purple'), dpi=600) +
ggrastr::rasterize(geom_point(data=boo[which(rownames(boo) %in% c(cells.108)),],
aes(x=100*mtDNA.5, y=100*mtDNA.108), size=0.5, color='orange'), dpi=600) +
scale_x_continuous('% donor 2') +
scale_y_continuous('% donor 1') +
geom_vline(xintercept = c(20, 80), color='black') +
geom_hline(yintercept = c(20, 80), color='black') +
theme_classic() +
theme(axis.title = element_text('Arial', size=10, color='black'),
axis.text = element_text('Arial', size=10, color='black'))
ggsave('./figure_mixing/MART1/figures/20230518_mtDNA_donor1_donor2.svg', width = 1.5, height = 1.5, plot = p)
heatmap.cells = c(cells.108[sample(length(cells.108), 500, replace=F)],
cells.5[sample(length(cells.5), 500, replace=F)])
col_fun = circlize::colorRamp2(breaks = seq(0,1,1/8), colors = BuenColors::jdb_palette(name = 'solar_rojos', n=9))
ha = columnAnnotation(Donor = c(rep('Donor1', 500), rep('Donor2', 500)),
col = list(Donor = c('Donor1' = 'orange', 'Donor2' = 'blue')), border = T)
library(ComplexHeatmap)
heatmap.cells = c(cells.108[sample(length(cells.108), 500, replace=F)],
cells.5[sample(length(cells.5), 500, replace=F)])
col_fun = circlize::colorRamp2(breaks = seq(0,1,1/8), colors = BuenColors::jdb_palette(name = 'solar_rojos', n=9))
ha = columnAnnotation(Donor = c(rep('Donor1', 500), rep('Donor2', 500)),
col = list(Donor = c('Donor1' = 'orange', 'Donor2' = 'blue')), border = T)
svglite::svglite('./figure_mixing/MART1/figures/20211106_MART1_mtDNA_haplotypes.svg', width = 3.5, height = 3.5)
Heatmap(as.matrix(combined.mutation.frequencies[c(gtools::mixedsort(mtDNA.108), gtools::mixedsort(mtDNA.5)), heatmap.cells]),
column_split = c(rep('Donor1', 500), rep('Donor2', 500)), cluster_rows = F, show_column_names = F, cluster_columns = F,
col = col_fun, border=T, row_names_gp = gpar(fontsize=8), column_title_gp = gpar(fontsize=10),
use_raster = T, raster_quality = 5, top_annotation = ha)
dev.off()
boo = data.frame(sample = c('MART1_1', 'MART1_2', 'MART1_3'),
donor = c(length(which(MART1.mito$Sample == 'MART1_1' & MART1.mito$donor == '108')),
length(which(MART1.mito$Sample == 'MART1_2' & MART1.mito$donor == '108')),
length(which(MART1.mito$Sample == 'MART1_3' & MART1.mito$donor == '108'))),
cells = c(length(which(MART1.mito$Sample == 'MART1_1')),
length(which(MART1.mito$Sample == 'MART1_2')),
length(which(MART1.mito$Sample == 'MART1_3'))))
ggplot(data=boo, aes(x=sample, y=100*donor/cells)) +
geom_line(aes(group=1)) +
geom_point(aes(size=cells), color='orange') +
scale_x_discrete('dilution',labels = c('1:3', '1:30', '1:300')) +
scale_y_log10('% donor 108') +
scale_size_continuous('# all cells',limits= c(4000,6000), range = c(1,3), breaks = c(4000,5000,6000)) +
theme_classic() +
theme(legend.position = 'right',
axis.title = element_text('Arial', size=10, color='black'),
#axis.title.x = element_blank(),
axis.text = element_text('Arial', size=10, color='black'))
boo = data.frame(sample = c('MART1_1', 'MART1_2', 'MART1_3'),
donor = c(length(which(MART1.mito$Sample == 'MART1_1' & MART1.mito$donor == '108')),
length(which(MART1.mito$Sample == 'MART1_2' & MART1.mito$donor == '108')),
length(which(MART1.mito$Sample == 'MART1_3' & MART1.mito$donor == '108'))),
cells = c(length(which(MART1.mito$Sample == 'MART1_1')),
length(which(MART1.mito$Sample == 'MART1_2')),
length(which(MART1.mito$Sample == 'MART1_3'))))
ggplot(data=boo, aes(x=sample, y=100*donor/cells)) +
geom_line(aes(group=1)) +
geom_point(aes(size=cells), color='orange') +
scale_x_discrete('dilution',labels = c('1:3', '1:30', '1:300')) +
scale_y_log10('% donor 108') +
scale_size_continuous('# all cells',limits= c(4000,6000), range = c(1,3), breaks = c(4000,5000,6000)) +
theme_classic() +
theme(legend.position = 'right',
axis.title = element_text('Arial', size=10, color='black'),
#axis.title.x = element_blank(),
axis.text = element_text('Arial', size=10, color='black'))
ggsave('./figure_mixing/MART1/figures/20211031_MART1_titration.svg', width = 3.5, height = 1.5)
###
cells = intersect(colnames(TSA.mat.all), colnames(TSB.mat.all))
TSAB.mat = rbind(TSA.mat.all[,cells], TSB.mat.all[,cells])
TSAB.so = CreateSeuratObject(TSAB.mat, assay = 'ADT')
TSAB.so <- NormalizeData(TSAB.so, assay = "ADT", normalization.method = 'CLR', margin = 2)
TSAB.so = ScaleData(TSAB.so)
TSAB.so = FindVariableFeatures(TSAB.so)
TSAB.so = FindNeighbors(TSAB.so)
MART1.mito = loadArchRProject('./data/mixing/MART1/MART1.mito/')
TSB.so = readRDS('./data/mixing/MART1/objects/20211031_MART1_TSB.so.rds')
TSB.so = readRDS('./data/mixing/MART1/objects/20211031_MART1_TSB.so.rds')
MART1.cells.color = c('Mono' = 'darkgreen',
'B cell' = 'red',
'CD8.naive' = RColorBrewer::brewer.pal(name = 'Purples', n=4)[2],
'CD8.EM' = RColorBrewer::brewer.pal(name = 'Purples', n=4)[3],
'CD8.TEMRA' = RColorBrewer::brewer.pal(name = 'Purples', n=4)[4],
'CD4.naive' = RColorBrewer::brewer.pal(name = 'Blues', n=5)[2],
'CD4.memory' = RColorBrewer::brewer.pal(name = 'Blues', n=5)[3],
'CD4.CD57hi' = RColorBrewer::brewer.pal(name = 'Blues', n=5)[4],
'CD4.activated' = RColorBrewer::brewer.pal(name = 'Blues', n=5)[5],
'NK' = 'black',
'Tcrb.pos.PD1.hi' = 'grey',
'none' = 'grey')
boo = subset(TSB.so, donor %in% c('5', '108'))
# add donor status to TSB object
boo = data.frame(cellName = MART1.mito$cellNames,
donor = MART1.mito$donor)
rownames(boo) = boo$cellName
boo = boo[colnames(TSB.so),]
TSB.so$donor = boo$donor
boo = subset(TSB.so, donor %in% c('5', '108'))
df = GetAssayData(boo)
df = t(scale(t(df)))
ha = columnAnnotation(Donor = boo$donor,
#manual.cluster = TSB.so$manual.cluster[which(TSB.so$donor %in% c('5', '108'))],
col = list(Donor = c('5' = 'blue', '108' = 'orange')), border = T)
col_fun = circlize::colorRamp2(breaks = seq(-2,2,4/8), colors = BuenColors::jdb_palette(name='brewer_yes', n=9))
Heatmap(df[row.order,], top_annotation = ha, use_raster = T, raster_quality = 10,
cluster_rows = F, cluster_columns = F, show_column_names = F, col = col_fun,
column_title_rot = 90, column_title_side = 'bottom', column_title_gp = gpar(fontsize=10),
row_title_gp = gpar(fontsize=10), row_names_side = 'left',
column_split = boo$manual.cluster, border = T)
row.order = c('Tcrb','CD3', 'CD4', 'CD8', 'CD62L', 'CCR7', 'CD45RO', 'CD45RA', 'CD127','CD25', 'CD28', 'CD57', 'PD1','CD39','CD38','CD56',
'CD14', 'CD16','CD33', 'CD11c', 'CD117', 'CD19', 'CD138')
Heatmap(df[row.order,], top_annotation = ha, use_raster = T, raster_quality = 10,
cluster_rows = F, cluster_columns = F, show_column_names = F, col = col_fun,
column_title_rot = 90, column_title_side = 'bottom', column_title_gp = gpar(fontsize=10),
row_title_gp = gpar(fontsize=10), row_names_side = 'left',
column_split = boo$manual.cluster, border = T)
TSB.so = readRDS(file = './data/mixing/MART1/objects/20211031_MART1_TSB_mito.so.rds')
TSB.so$manual.cluster = factor(TSB.so$manual.cluster, levels = names(MART1.cells.color))
boo = subset(TSB.so, donor %in% c('5', '108'))
df = GetAssayData(boo)
df = t(scale(t(df)))
ha = columnAnnotation(Donor = boo$donor,
#manual.cluster = TSB.so$manual.cluster[which(TSB.so$donor %in% c('5', '108'))],
col = list(Donor = c('5' = 'blue', '108' = 'orange')), border = T)
col_fun = circlize::colorRamp2(breaks = seq(-2,2,4/8), colors = BuenColors::jdb_palette(name='brewer_yes', n=9))
svglite::svglite('./figure_mixing/MART1/figures/20211031_MART1_donor_recipient.svg', width = 6, height = 4)
Heatmap(df[row.order,], top_annotation = ha, use_raster = T, raster_quality = 10,
cluster_rows = F, cluster_columns = F, show_column_names = F, col = col_fun,
column_title_rot = 90, column_title_side = 'bottom', column_title_gp = gpar(fontsize=10),
row_title_gp = gpar(fontsize=10), row_names_side = 'left',
column_split = boo$manual.cluster, border = T)
dev.off()
Heatmap(df[row.order,], top_annotation = ha, use_raster = T, raster_quality = 10,
cluster_rows = F, cluster_columns = F, show_column_names = F, col = col_fun,
column_title_rot = 90, column_title_side = 'bottom', column_title_gp = gpar(fontsize=10),
row_title_gp = gpar(fontsize=10), row_names_side = 'left',
column_split = boo$manual.cluster, border = T)
TSAB.so = readRDS(file='./data/mixing/MART1/objects/20220225_MART1_TSAB.so')
MART1.mito = loadArchRProject('./data/mixing/MART1/MART1.mito/')
# gate on T cells using chromatin accessibility profiles
Tcells = gsub(MART1.mito$cellNames[which(MART1.mito$Clusters %in% c('C3', 'C6', 'C7', 'C8', 'C9'))],
pattern = '-1', replacement = '')
# pull donor annotation from ArchR object
donor.df = data.frame(cell = MART1.mito$cellNames,
donor = MART1.mito$donor)
rownames(donor.df) = donor.df$cell
# include ADT data
df = as.data.frame(t(GetAssayData(TSAB.so, slot = 'scale.data')))
df$cluster = TSAB.so$seurat_clusters
df = df[Tcells,]
df$donor = donor.df[paste0(rownames(df),'-1'), 'donor']
# identify antigen-specific cells for MART1
cells = rownames(df)[which(df$SAV1 > 1.5 & df$SAV2 > 1.5 & df$SAV1 <5 & df$SAV2 < 5)]
ggplot() + geom_point(data=df[which(df$SAV1 < 5 & df$SAV2 < 5),], aes(x=SAV1, y=SAV2, color=Tcrb), size=0.5) +
#geom_point(data=df[which(rownames(df) %in% cells & df$donor == '5'),], aes(x=SAV1, y=SAV2), color='black', size=1) +
scale_color_gradientn(colours = c('white', BuenColors::jdb_palette(name = 'solar_rojos'))) +
scale_x_continuous('MART1 SAV1',limits = c(-2,5)) +
scale_y_continuous('MART1 SAV2',limits = c(-2,5)) +
geom_vline(xintercept = 1.5) +
geom_hline(yintercept = 1.5) +
theme_classic() +
theme(axis.title = element_text('Arial', size=10, color='black'),
axis.text = element_text('Arial', size=10, color='black'))
ggsave('./figure_mixing/MART1/figures/20220226_MART1_SAV1_SAV2.svg', width = 3, height = 2.5)
cells.EBV = rownames(df)[which(df$CD8 > 1 & df$SAV5 > 2 & df$SAV6 > 2)]
ggplot() + geom_point(data=df[which(df$CD8 > 1),], aes(x=SAV5, y=SAV6, color=donor), size=0.5) +
#geom_point(data=df[which(rownames(df) %in% cells & df$donor == '5'),], aes(x=SAV1, y=SAV2), color='black', size=1) +
#scale_color_gradientn(colours = c('white', BuenColors::jdb_palette(name = 'solar_rojos'))) +
scale_x_continuous('MART1 SAV1',limits = c(-2,10)) +
scale_y_continuous('MART1 SAV2',limits = c(-2,10)) +
geom_vline(xintercept = 2) +
geom_hline(yintercept = 2) +
theme_classic() +
theme(axis.title = element_text('Arial', size=10, color='black'),
axis.text = element_text('Arial', size=10, color='black'))
# statistics
statistics.df = data.frame()
for (s in c('MART1_1', 'MART1_2', 'MART1_3')) {
donor.1 =  rownames(df[which(df$donor == '108'),])
donor.1 = donor.1[which(grepl(s, donor.1))]
donor.2 =  rownames(df[which(df$donor == '5'),])
donor.2 = donor.2[which(grepl(s, donor.2))]
statistics.df = rbind(statistics.df, data.frame(sample = s,
cells = length(which(grepl(s, MART1.mito$cellNames))),
Tcells = length(which(grepl(s, Tcells))),
donor.1 = length(donor.1),
donor.1.MART1 = length(which(cells %in% donor.1)),
donor.2 = length(donor.2),
donor.2.MART1 = length(which(cells %in% donor.2))))
}
statistics.df$donor.1.MART1.freq = statistics.df$donor.1.MART1 / statistics.df$cells
ggplot(statistics.df, aes(x=sample, y=100*donor.1.MART1.freq)) +
geom_line(aes(group=1)) +
geom_point(color='orange') +
scale_x_discrete('dilution',labels = c('1:3', '1:30', '1:300')) +
scale_y_log10('% MART1-specific T cells') +
theme_classic() +
theme(axis.title = element_text('Arial', size=10, color='black'),
axis.text = element_text('Arial', size=10, color='black'))
ggsave('./figure_mixing/MART1/figures/20220226_MART1_specific_cells_titration.svg', width = 2.5, height = 1.5)
boo = reshape2::melt(statistics.df[,c('sample', 'donor.1', 'donor.2', 'donor.1.MART1', 'donor.2.MART1')])
boo$sample.variable = paste0(boo$sample, '.', boo$variable)
boo$donor = c(rep('donor.1', 3), rep('donor.2', 3), rep('donor.1', 3), rep('donor.2', 3))
boo$type = c(rep('all', 6), rep('MART1', 6))
boo$donor.sample = factor(paste0(boo$donor, '.', boo$sample),
levels = c('donor.1.MART1_1', 'donor.2.MART1_1', 'donor.1.MART1_2', 'donor.2.MART1_2',
'donor.1.MART1_3', 'donor.2.MART1_3'))
ggplot(data=boo, aes(x=donor.sample, y=value, fill=variable, alpha=variable)) +
scale_fill_manual(values = c('donor.1' = 'orange', 'donor.2' = 'blue', 'donor.1.MART1' = 'orange', 'donor.2.MART1' = 'blue')) +
scale_alpha_manual(values = c('donor.1' = 0.3, 'donor.2' = 0.3, 'donor.1.MART1' = 1, 'donor.2.MART1' = 1)) +
geom_col() +
scale_y_sqrt('T cells', breaks = c(1,10,100,500, 1000,2000)) +
theme_classic() +
theme(legend.position = 'none',
axis.title = element_text('Arial', size=10, color='black'),
axis.text = element_text('Arial', size=10, color='black'),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
ggsave('./figure_mixing/MART1/figures/20220227_MART1_cells.svg', width = 1.5, height = 1.5)
TSAB.so$manual.cluster = 'none'
TSAB.so$manual.cluster[which(TSAB.so$seurat_clusters %in% c('0', '1', '2', '4', '13', '19'))] = 'CD4+ T cells'
TSAB.so$manual.cluster[which(TSAB.so$seurat_clusters %in% c('3','8', '9', '10', '11'))] = 'CD8+ T cells'
TSAB.so$manual.cluster[which(TSAB.so$seurat_clusters %in% c('5', '6', '7', '12', '18'))] = 'Monocytes'
TSAB.so$manual.cluster[which(TSAB.so$seurat_clusters %in% c('14'))] = 'B cells'
TSAB.so$manual.cluster[which(TSAB.so$seurat_clusters %in% c('20'))] = 'CD8+ T cells MART1'
TSAB.so$manual.cluster[which(TSAB.so$seurat_clusters %in% c('22'))] = 'CD4+ T cells MART1'
Idents(TSAB.so) = 'manual.cluster'
boo = subset(TSAB.so, downsample=200)
boo$manual.cluster = factor(boo$manual.cluster, levels = c('B cells', 'Monocytes', 'CD4+ T cells', 'CD4+ T cells MART1', 'CD8+ T cells', 'CD8+ T cells MART1'))
DoHeatmap(boo, cells = colnames(boo)[which(boo$manual.cluster != 'none')], group.by = 'manual.cluster',
features = c('SAV1', 'SAV2', 'Tcrb','CD3', 'CD4', 'CD8', 'CD127',
'CD45RO', 'CD45RA', 'CD62L', 'CCR7', 'CD14', 'CD33', 'CD19'),
group.colors = c('B cells' = 'red', 'Monocytes' = 'darkgreen',
'CD4+ T cells' = RColorBrewer::brewer.pal(name = 'Blues', n=3)[2],
'CD4+ T cells MART1' = 'grey',
'CD8+ T cells' = RColorBrewer::brewer.pal(name = 'Blues', n=3)[3],
'CD8+ T cells MART1' = 'black'), size = 3) +
scale_fill_gradientn(colours = BuenColors::jdb_palette(name = 'brewer_yes', type='continuous'), na.value = 'white') +
theme(axis.text = element_text('Arial', size=10, color='black'),
axis.title = element_text('Arial', size=10, color='black'))
ggsave('./figure_mixing/MART1/figures/20220227_MART1_heatmap.svg', width = 5, height = 2.5)
volcano.data.CD4 = read.csv2('./data/mixing/MART1/DGEA/20220228_CD4_stim_unstim.csv', sep = ' ')
volcano.data.CD8 = read.csv2('./data/mixing/MART1/DGEA/20220228_CD8_stim_unstim.csv', sep = ' ')
volcano.data.CD8$diff.accessibility = as.numeric(volcano.data.CD8$diff.accessibility)
volcano.data.CD4$diff.accessibility = as.numeric(volcano.data.CD4$diff.accessibility)
volcano.data.CD4$p.adj = as.numeric(volcano.data.CD4$p.adj)
volcano.data.CD8$p.adj = as.numeric(volcano.data.CD8$p.adj)
volcano.data.CD4$significant = ifelse(abs(volcano.data.CD4$diff.accessibility) > 1.5 & -log10(volcano.data.CD4$p.adj) >50, T, F)
volcano.data.CD8$significant = ifelse(abs(volcano.data.CD8$diff.accessibility) > 1.5 & -log10(volcano.data.CD8$p.adj) >50, T, F)
ggplot() +
geom_vline(xintercept = c(-1.5,1.5), color='grey', linetype='dashed') +
geom_hline(yintercept = c(50), color='grey', linetype='dashed') +
geom_point(data=volcano.data.CD4[!volcano.data.CD4$significant,], aes(x=diff.accessibility, y=-log10(p.adj)), color='grey') +
geom_point(data=volcano.data.CD4[volcano.data.CD4$significant,], aes(x=diff.accessibility, y=-log10(p.adj)), color='black') +
geom_label_repel(data=volcano.data.CD4[volcano.data.CD4$significant,],
aes(x=diff.accessibility, y=-log10(p.adj),label=stringr::str_split_fixed(TF, pattern = '_', n = 2)[,1]), size = 2.5,
label.size = 0, label.padding = 0.1, segment.size = 0.25, segment.colour = 'grey', min.segment.length = 0.1, max.overlaps = 15) +
scale_x_continuous('Difference in chromatin accessibility') +
scale_y_continuous('-log10(FDR)',limits = c(0,150)) +
theme_bw() +
theme(legend.position = 'none',
panel.grid = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black', size = 0.25),
axis.ticks = element_line(colour = 'black', size = 0.25),
axis.title = element_text(family = 'Arial', size = 10, colour = 'black'),
axis.text = element_text(family = 'Arial', size = 10, colour = 'black'))
library(ggrepel)
ggplot() +
geom_vline(xintercept = c(-1.5,1.5), color='grey', linetype='dashed') +
geom_hline(yintercept = c(50), color='grey', linetype='dashed') +
geom_point(data=volcano.data.CD4[!volcano.data.CD4$significant,], aes(x=diff.accessibility, y=-log10(p.adj)), color='grey') +
geom_point(data=volcano.data.CD4[volcano.data.CD4$significant,], aes(x=diff.accessibility, y=-log10(p.adj)), color='black') +
geom_label_repel(data=volcano.data.CD4[volcano.data.CD4$significant,],
aes(x=diff.accessibility, y=-log10(p.adj),label=stringr::str_split_fixed(TF, pattern = '_', n = 2)[,1]), size = 2.5,
label.size = 0, label.padding = 0.1, segment.size = 0.25, segment.colour = 'grey', min.segment.length = 0.1, max.overlaps = 15) +
scale_x_continuous('Difference in chromatin accessibility') +
scale_y_continuous('-log10(FDR)',limits = c(0,150)) +
theme_bw() +
theme(legend.position = 'none',
panel.grid = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black', size = 0.25),
axis.ticks = element_line(colour = 'black', size = 0.25),
axis.title = element_text(family = 'Arial', size = 10, colour = 'black'),
axis.text = element_text(family = 'Arial', size = 10, colour = 'black'))
ggsave('./figure_mixing/MART1/figures/20220228_volcano_CD4_stim_unstim.svg', width = 2.5, height = 2)
ggplot() +
geom_vline(xintercept = c(-1.5,1.5), color='grey', linetype='dashed') +
geom_hline(yintercept = c(50), color='grey', linetype='dashed') +
geom_point(data=volcano.data.CD8[!volcano.data.CD8$significant,], aes(x=diff.accessibility, y=-log10(p.adj)), color='grey') +
geom_point(data=volcano.data.CD8[volcano.data.CD8$significant,], aes(x=diff.accessibility, y=-log10(p.adj)), color='black') +
geom_label_repel(data=volcano.data.CD8[volcano.data.CD8$significant,],
aes(x=diff.accessibility, y=-log10(p.adj),label=stringr::str_split_fixed(TF, pattern = '_', n = 2)[,1]), size = 2.5,
label.size = 0, label.padding = 0.1, segment.size = 0.25, segment.colour = 'grey', min.segment.length = 0.1, max.overlaps = 15) +
scale_x_continuous('Difference in chromatin accessibility') +
scale_y_continuous('-log10(FDR)',limits = c(0,300)) +
theme_bw() +
theme(legend.position = 'none',
panel.grid = element_blank(),
panel.border = element_blank(),
axis.line = element_line(color = 'black', size = 0.25),
axis.ticks = element_line(colour = 'black', size = 0.25),
axis.title = element_text(family = 'Arial', size = 10, colour = 'black'),
axis.text = element_text(family = 'Arial', size = 10, colour = 'black'))
ggsave('./figure_mixing/MART1/figures/20220228_volcano_CD8_stim_unstim.svg', width = 2.5, height = 2)
Pool108.1.bc = data.table::fread('./data/mixing/MART1/MART1_1/filtered_peak_bc_matrix/barcodes.tsv', header = F)
Pool108.1.bc = data.table::fread('./data/mixing/MART1/MART1_1/filtered_peak_bc_matrix/barcodes.tsv', header = F)
Pool108.1.bc = data.table::fread('./data/mixing/MART1/MART1_1/filtered_peak_bc_matrix/barcodes.tsv', header = F)
Pool108.2.bc = data.table::fread('./data/mixing/MART1/MART1_1/filtered_peak_bc_matrix/barcodes.tsv', header = F)
Pool108.3.bc = data.table::fread('./data/mixing/MART1/MART1_1/filtered_peak_bc_matrix/barcodes.tsv', header = F)
Pool108.1.bc$V1 = paste0('MART1_1#', Pool108.1.bc$V1)
Pool108.2.bc$V1 = paste0('MART1_1#', Pool108.2.bc$V1)
Pool108.3.bc$V1 = paste0('MART1_1#', Pool108.3.bc$V1)
Pool108.1 = rbind(data.table::fread('./data/mixing/MART1/MART1_1/Pool108_1_S1_L001.bed'),
data.table::fread('./data/mixing/MART1/MART1_1/Pool108_1_S1_L002.bed'))
colnames(Pool108.1) = c('gene', 'start', 'end', 'bc', 'n')
Pool108.1$bc = as.character(reverseComplement(DNAStringSet(Pool108.1$bc)))
Pool108.1$sample = 'Pool108_1'
Pool108.1$bc = paste0('MART1_1#', Pool108.1$bc, '-1')
Pool108.2 = rbind(data.table::fread('./data/mixing/MART1/MART1_2/Pool108_2_S2_L001.bed'),
data.table::fread('./data/mixing/MART1/MART1_2/Pool108_2_S2_L002.bed'))
colnames(Pool108.2) = c('gene', 'start', 'end', 'bc', 'n')
Pool108.2$bc = as.character(reverseComplement(DNAStringSet(Pool108.2$bc)))
Pool108.2$sample = 'Pool108_2'
Pool108.2$bc = paste0('MART1_2#', Pool108.2$bc, '-1')
Pool108.3 = rbind(data.table::fread('./data/mixing/MART1/MART1_3/Pool108_3_S3_L001.bed'),
data.table::fread('./data/mixing/MART1/MART1_3/Pool108_3_S3_L002.bed'))
colnames(Pool108.3) = c('gene', 'start', 'end', 'bc', 'n')
Pool108.3$bc = as.character(reverseComplement(DNAStringSet(Pool108.3$bc)))
Pool108.3$sample = 'Pool108_3'
Pool108.3$bc = paste0('MART1_3#', Pool108.3$bc, '-1')
TCR.df = bind_rows(Pool108.1, Pool108.2, Pool108.3) %>%
filter(gene != 'EF1a_promoter') %>%
filter(bc %in% MART1.mito$cellNames)
library(dplyr)
Pool108.1.bc = data.table::fread('./data/mixing/MART1/MART1_1/filtered_peak_bc_matrix/barcodes.tsv', header = F)
Pool108.2.bc = data.table::fread('./data/mixing/MART1/MART1_1/filtered_peak_bc_matrix/barcodes.tsv', header = F)
Pool108.3.bc = data.table::fread('./data/mixing/MART1/MART1_1/filtered_peak_bc_matrix/barcodes.tsv', header = F)
Pool108.1.bc$V1 = paste0('MART1_1#', Pool108.1.bc$V1)
Pool108.2.bc$V1 = paste0('MART1_1#', Pool108.2.bc$V1)
Pool108.3.bc$V1 = paste0('MART1_1#', Pool108.3.bc$V1)
Pool108.1 = rbind(data.table::fread('./data/mixing/MART1/MART1_1/Pool108_1_S1_L001.bed'),
data.table::fread('./data/mixing/MART1/MART1_1/Pool108_1_S1_L002.bed'))
colnames(Pool108.1) = c('gene', 'start', 'end', 'bc', 'n')
Pool108.1$bc = as.character(reverseComplement(DNAStringSet(Pool108.1$bc)))
Pool108.1$sample = 'Pool108_1'
Pool108.1$bc = paste0('MART1_1#', Pool108.1$bc, '-1')
Pool108.2 = rbind(data.table::fread('./data/mixing/MART1/MART1_2/Pool108_2_S2_L001.bed'),
data.table::fread('./data/mixing/MART1/MART1_2/Pool108_2_S2_L002.bed'))
colnames(Pool108.2) = c('gene', 'start', 'end', 'bc', 'n')
Pool108.2$bc = as.character(reverseComplement(DNAStringSet(Pool108.2$bc)))
Pool108.2$sample = 'Pool108_2'
Pool108.2$bc = paste0('MART1_2#', Pool108.2$bc, '-1')
Pool108.3 = rbind(data.table::fread('./data/mixing/MART1/MART1_3/Pool108_3_S3_L001.bed'),
data.table::fread('./data/mixing/MART1/MART1_3/Pool108_3_S3_L002.bed'))
colnames(Pool108.3) = c('gene', 'start', 'end', 'bc', 'n')
Pool108.3$bc = as.character(reverseComplement(DNAStringSet(Pool108.3$bc)))
Pool108.3$sample = 'Pool108_3'
Pool108.3$bc = paste0('MART1_3#', Pool108.3$bc, '-1')
TCR.df = bind_rows(Pool108.1, Pool108.2, Pool108.3) %>%
filter(gene != 'EF1a_promoter') %>%
filter(bc %in% MART1.mito$cellNames)
df = data.frame(bc = MART1.mito$cellNames,
individual = MART1.mito$donor)
rownames(df) = df$bc
TCR.df$individual = df[TCR.df$bc, 'individual']
df = cbind(df, getEmbedding(MART1.mito))
colnames(df) = c('bc', 'individual', 'UMAP1', 'UMAP2')
ggplot() +
geom_point(data=df, aes(x=UMAP1, y=UMAP2), size=0.5, color='grey90') +
geom_point(data=df[which(df$bc %in% TCR.df$bc),], aes(x=UMAP1, y=UMAP2), size=1, color='firebrick') +
theme_classic() +
NoAxes()
ggsave('./figure_mixing/MART1/figures/20230519_MART1_TCR.png', width = 4, height = 4, dpi = 600)
