scale_y_continuous(limits = c(-100,120), breaks = c(-100,-50,0,50,100), labels = c(100,50,0,50,100)) +
scale_fill_manual(values = cluster.colors) +
scale_color_manual(values = cluster.colors) +
geom_label(data=labels, aes(x=manual.cluster, y=y, label=paste0('n=',n)), label.size = 0, size=2) +
theme_classic() +
theme(legend.position = 'none',
axis.title.x = element_blank(),
axis.text.x = element_text(angle=90, hjust=1, vjust=0.5),
axis.title = element_text('Arial', size=10, color='black'),
axis.text = element_text('Arial', size=10, color='black'))
ggsave('./figure_coevolution/AML/figures/20220113_AML1026_SF3B1.svg', width = 2.6, height = 2.1, plot = p)
vafs.RHP$sample = stringr::str_split_fixed(rownames(vafs.RHP), pattern = '#', n=2)[,1]
statistics.df = data.frame()
for (celltype in unique(vafs.RHP$manual.cluster)) {
NRAS.1 = length(which(vafs.RHP$sample == '1026.1' & vafs.RHP$manual.cluster == celltype & vafs.RHP$annotation == 'variant1' & vafs.RHP$NRAS != 0)) /
length(which(vafs.RHP$sample == '1026.1' & vafs.RHP$manual.cluster == celltype & vafs.RHP$annotation == 'variant1'))
NRAS.3 = length(which(vafs.RHP$sample == '1026.3' & vafs.RHP$manual.cluster == celltype & vafs.RHP$annotation == 'variant1' & vafs.RHP$NRAS != 0)) /
length(which(vafs.RHP$sample == '1026.3' & vafs.RHP$manual.cluster == celltype & vafs.RHP$annotation == 'variant1'))
SF3B1.1 = length(which(vafs.RHP$sample == '1026.1' & vafs.RHP$manual.cluster == celltype & vafs.RHP$annotation == 'variant1' & vafs.RHP$SF3B1 != 0)) /
length(which(vafs.RHP$sample == '1026.1' & vafs.RHP$manual.cluster == celltype & vafs.RHP$annotation == 'variant1'))
SF3B1.3 = length(which(vafs.RHP$sample == '1026.3' & vafs.RHP$manual.cluster == celltype & vafs.RHP$annotation == 'variant1' & vafs.RHP$SF3B1 != 0)) /
length(which(vafs.RHP$sample == '1026.3' & vafs.RHP$manual.cluster == celltype & vafs.RHP$annotation == 'variant1'))
statistics.df = rbind(statistics.df, data.frame(celltype = celltype, NRAS.1 = NRAS.1, NRAS.3 = NRAS.3, SF3B1.1 = SF3B1.1, SF3B1.3 = SF3B1.3))
}
boo = reshape2::melt(statistics.df, id.vars = 'celltype')
boo$gene = stringr::str_split_fixed(boo$variable, pattern = '\\.', n=2)[,1]
boo$gene.manual.cluster = paste0(boo$gene, '.', boo$celltype)
ggplot(boo[which(boo$celltype %in% c('HSC', 'Progenitor', 'Mono', 'Erythroid', 'Plasma')),],
aes(x=variable, y=100*value)) + geom_point(aes(color=celltype)) + geom_line(aes(group=gene.manual.cluster, color=celltype)) +
scale_x_discrete(labels = c('Screening', 'On treatment', 'Screening', 'On treatment')) +
scale_y_continuous('%recipient positive') +
scale_color_manual(values = cluster.colors) +
theme_classic() +
theme(legend.position = 'none',
axis.title.x = element_blank(),
axis.text.x = element_text(angle=90, hjust=1, vjust=0.5),
axis.title = element_text('Arial', size=10, color='black'),
axis.text = element_text('Arial', size=10, color='black'))
ggsave('./figure_coevolution/AML/figures/20220113_AML1026_NRAS_SF3B1_kinetics.svg', width = 1.3, height = 2)
so.13.Tcell = readRDS('./data/coevolution/objects/20220112_AML1026_Tcell.rds')
cluster.colors.T = c('CD4' = RColorBrewer::brewer.pal(name = 'Blues', n = 6)[2],
'CD4 naive' = RColorBrewer::brewer.pal(name = 'Blues', n = 6)[3],
'CD4 CM' = RColorBrewer::brewer.pal(name = 'Blues', n = 6)[4],
'CD4 CM activated' = RColorBrewer::brewer.pal(name = 'Blues', n = 6)[5],
'CD4 EM' = RColorBrewer::brewer.pal(name = 'Blues', n = 6)[6],
'CD8' = RColorBrewer::brewer.pal(name = 'Reds', n = 3)[2],
'CD8 memory' = RColorBrewer::brewer.pal(name = 'Reds', n = 3)[3],
'NK' = 'black')
T.cell.annotation = data.frame(sample = so.13.Tcell$orig.ident,
manual.cluster = so.13.Tcell$manual.cluster,
annotation = so.13.Tcell$annotation)
T.cell.annotation = T.cell.annotation %>% filter(annotation %in% c('variant1', 'variant2'))
T.cell.statistics = as.data.frame(T.cell.annotation %>% group_by(manual.cluster) %>% count(annotation))
T.cell.statistics$freq = 0
for (i in seq(1,nrow(T.cell.statistics))) {
T.cell.statistics$freq[i] = T.cell.statistics$n[i] / sum(T.cell.statistics$n[which(T.cell.statistics$manual.cluster == T.cell.statistics$manual.cluster[i])])
}
T.cell.statistics = T.cell.statistics %>% filter(annotation == 'variant2')
ggplot(T.cell.statistics, aes(x=manual.cluster, y=100*freq)) + geom_col(aes(fill=manual.cluster)) +
scale_y_continuous('%donor chimerism', limits = c(0,100)) +
scale_fill_manual(values = cluster.colors.T) +
theme_classic() +
theme(legend.position = 'none',
axis.title.x = element_blank(),
axis.text.x = element_text(angle=90, hjust=1, vjust=0.5),
axis.title = element_text('Arial', size=10, color='black'),
axis.text = element_text('Arial', size=10, color='black'))
ggsave('./figure_coevolution/AML/figures/20220113_AML1026_Tcell_chimerism.svg', width = 1.7, height = 2.5)
variable.sites = read.csv2(file = './data/coevolution/vafs/20220211_AML1026_1_variable_sites.csv')
View(variable.sites)
variable.sites = read.csv2(file = './data/coevolution/vafs/20220211_AML1026_1_variable_sites.csv', sep = '\t')
View(variable.sites)
variable.sites = read.csv2(file = './data/coevolution/vafs/20220211_AML1026_1_variable_sites.csv', sep = ' ')
View(variable.sites)
# plot coverage
GenePos.tib <- tibble(Names = c("ATP6", "ATP8", "COX1", "COX2", "COX3", "CYTB", "ND1", "ND2", "ND3",
"ND4", "ND4L", "ND5", "ND6", "RNR1", "RNR2"),
start = c(8527, 8366, 5904, 7586, 9207, 14747, 3307, 4470, 10059, 10760, 10470, 12337, 14149, 648, 1671),
end = c(9207, 8572, 7445, 8269, 9990, 15887, 4262, 5511, 10404, 12137, 10766, 14148, 14673, 1601, 3229))
GenePos.tib <- GenePos.tib %>% arrange(start) %>%
mutate(mid = round((end-start)/2+start,0), ycoord = rep(c(280,300,320), length.out = 15))
p=ggplot(variable.sites, aes(x=position, y=mean_coverage)) + geom_col() +
geom_segment(data = GenePos.tib, aes(x = start, y = ycoord, xend = end, yend = ycoord)) +
geom_text(data = GenePos.tib, aes(x = mid, y = ycoord+8, label = Names), size = 2) +
scale_x_continuous('chrM') +
scale_y_continuous('mean coverage') +
theme_classic() +
theme(axis.title = element_text('Arial', size=10, color='black'),
axis.text = element_text('Arial', size=10, color='black'))
ggsave('./figure_coevolution/AML/figures/20220211_AML1026_1_coverage.png', width = 3.5, height = 2.5, plot = p, dpi = 600)
p=ggplot(variable.sites, aes(x=as.numeric(position), y=as.numeric(mean_coverage))) + geom_col() +
geom_segment(data = GenePos.tib, aes(x = start, y = ycoord, xend = end, yend = ycoord)) +
geom_text(data = GenePos.tib, aes(x = mid, y = ycoord+8, label = Names), size = 2) +
scale_x_continuous('chrM') +
scale_y_continuous('mean coverage') +
theme_classic() +
theme(axis.title = element_text('Arial', size=10, color='black'),
axis.text = element_text('Arial', size=10, color='black'))
ggsave('./figure_coevolution/AML/figures/20220211_AML1026_1_coverage.png', width = 3.5, height = 2.5, plot = p, dpi = 600)
variable.sites = read.csv2(file = './data/coevolution/vafs/20220211_AML1026_3_variable_sites.csv', sep = ' ')
variable.sites = read.csv2(file = './data/coevolution/vafs/20220211_AML1026_3_variable_sites.csv', sep = ' ')
# plot coverage
GenePos.tib <- tibble(Names = c("ATP6", "ATP8", "COX1", "COX2", "COX3", "CYTB", "ND1", "ND2", "ND3",
"ND4", "ND4L", "ND5", "ND6", "RNR1", "RNR2"),
start = c(8527, 8366, 5904, 7586, 9207, 14747, 3307, 4470, 10059, 10760, 10470, 12337, 14149, 648, 1671),
end = c(9207, 8572, 7445, 8269, 9990, 15887, 4262, 5511, 10404, 12137, 10766, 14148, 14673, 1601, 3229))
GenePos.tib <- GenePos.tib %>% arrange(start) %>%
mutate(mid = round((end-start)/2+start,0), ycoord = rep(c(280,300,320), length.out = 15))
p=ggplot(variable.sites, aes(x=as.numeric(position), y=as.numeric(mean_coverage))) + geom_col() +
geom_segment(data = GenePos.tib, aes(x = start, y = ycoord, xend = end, yend = ycoord)) +
geom_text(data = GenePos.tib, aes(x = mid, y = ycoord+8, label = Names), size = 2) +
scale_x_continuous('chrM') +
scale_y_continuous('mean coverage') +
theme_classic() +
theme(axis.title = element_text('Arial', size=10, color='black'),
axis.text = element_text('Arial', size=10, color='black'))
ggsave('./figure_coevolution/AML/figures/20220211_AML1026_3_coverage.png', width = 3.5, height = 2.5, plot = p, dpi = 600)
AML1026.1.vafs = read_vafs('./data/coevolution/1026_1/AF.csv', 'AML1026.1')
source('./R/filehandling.functions.tapestri.R')
AML1026.1.vafs = read_vafs('./data/coevolution/1026_1/AF.csv', 'AML1026.1')
AML1026.3.vafs = read_vafs('./data/coevolution/1026_3/AF.csv', 'AML1026.3')
AML1026.1.vafs.combined = merge_with_mgatk(AML1026.1.vafs,
'./data/coevolution/vafs/20220211_AML1026.1_mtDNA_vafs.csv',
'AML1026.1', truncate_barcodes = T)
AML1026.3.vafs.combined = merge_with_mgatk(AML1026.3.vafs,
'./data/coevolution/vafs/20220211_AML1026.3_mtDNA_vafs.csv',
'AML1026.3', truncate_barcodes = T)
intersect(colnames(AML1026.1.vafs), colnames(AML1026.3.vafs))
intersect(colnames(AML1026.1.vafs.combined), colnames(AML1026.3.vafs.combined))
# consider mtDNA and nuclear single nucleotide variants detectable across both samples
AML1026.vafs = rbind(AML1026.1.vafs[,intersect(colnames(AML1026.1.vafs), colnames(AML1026.3.vafs))],
AML1026.3.vafs[,intersect(colnames(AML1026.1.vafs), colnames(AML1026.3.vafs))]
AML1026.vafs.combined = rbind(AML1026.1.vafs.combined[,intersect(colnames(AML1026.1.vafs.combined), colnames(AML1026.3.vafs.combined))],
# read data using helper functions
AML1026.1.vafs = read_vafs('./data/coevolution/1026_1/AF.csv', 'AML1026.1')
AML1026.3.vafs = read_vafs('./data/coevolution/1026_3/AF.csv', 'AML1026.3')
AML1026.1.vafs.combined = merge_with_mgatk(AML1026.1.vafs,
'./data/coevolution/vafs/20220211_AML1026.1_mtDNA_vafs.csv',
'AML1026.1', truncate_barcodes = T)
AML1026.3.vafs.combined = merge_with_mgatk(AML1026.3.vafs,
'./data/coevolution/vafs/20220211_AML1026.3_mtDNA_vafs.csv',
'AML1026.3', truncate_barcodes = T)
# consider mtDNA and nuclear single nucleotide variants detectable across both samples
AML1026.vafs = rbind(AML1026.1.vafs[,intersect(colnames(AML1026.1.vafs), colnames(AML1026.3.vafs))],
AML1026.3.vafs[,intersect(colnames(AML1026.1.vafs), colnames(AML1026.3.vafs))]
AML1026.vafs.combined = rbind(AML1026.1.vafs.combined[,intersect(colnames(AML1026.1.vafs.combined), colnames(AML1026.3.vafs.combined))],
intersect(colnames(AML1026.1.vafs.combined), colnames(AML1026.3.vafs.combined))
intersect(colnames(AML1026.1.vafs.combined), colnames(AML1026.3.vafs.combined))
AML1026.1.vafs.combined[,intersect(colnames(AML1026.1.vafs.combined), colnames(AML1026.3.vafs.combined))]
AML1026.3.vafs.combined[,intersect(colnames(AML1026.1.vafs.combined), colnames(AML1026.3.vafs.combined))]
# consider mtDNA and nuclear single nucleotide variants detectable across both samples
AML1026.vafs = rbind(AML1026.1.vafs[,intersect(colnames(AML1026.1.vafs), colnames(AML1026.3.vafs))],
AML1026.3.vafs[,intersect(colnames(AML1026.1.vafs), colnames(AML1026.3.vafs))])
AML1026.vafs.combined = rbind(AML1026.1.vafs.combined[,intersect(colnames(AML1026.1.vafs.combined), colnames(AML1026.3.vafs.combined))],
AML1026.3.vafs.combined[,intersect(colnames(AML1026.1.vafs.combined), colnames(AML1026.3.vafs.combined))])
###
# donor-recipient deconvolution using germline SNPs and maternal mtDNA variants
###
variants.1 = c('NF1:chr17:29559932:C/A', 'TP53:chr17:7579801:G/C', 'TP53:chr17:7578115:T/C', '16304T>C', '4336T>C')
variants.2 = c('SF3B1:chr2:198267770:G/GAA',
'NPM1:chr5:170837457:A/G', 'KDM6A:chrX:44938563:G/A', 'DNMT3A:chr2:25463483:G/A',
'BRAF:chr7:140449071:C/G', 'FLT3:chr13:28592546:T/C', 'NF1:chr17:29483195:G/C', '16294C>T', '16296C>T')
#RHP.mutations = c('ASXL1'='ASXL1:chr20:31022441:A/G', 'NRAS' = 'NRAS:chr1:115258745:C/G', 'SF3B1' = 'SF3B1:chr2:198266512:C/T')
RHP.mutations = c('NRAS' = 'NRAS:chr1:115258745:C/G', 'SF3B1' = 'SF3B1:chr2:198266512:C/T')
DP1 = as.data.frame(data.table::fread('./data/1026_1/DP.csv'))
###
# donor-recipient deconvolution using germline SNPs and maternal mtDNA variants
###
variants.1 = c('NF1:chr17:29559932:C/A', 'TP53:chr17:7579801:G/C', 'TP53:chr17:7578115:T/C', '16304T>C', '4336T>C')
variants.2 = c('SF3B1:chr2:198267770:G/GAA',
'NPM1:chr5:170837457:A/G', 'KDM6A:chrX:44938563:G/A', 'DNMT3A:chr2:25463483:G/A',
'BRAF:chr7:140449071:C/G', 'FLT3:chr13:28592546:T/C', 'NF1:chr17:29483195:G/C', '16294C>T', '16296C>T')
#RHP.mutations = c('ASXL1'='ASXL1:chr20:31022441:A/G', 'NRAS' = 'NRAS:chr1:115258745:C/G', 'SF3B1' = 'SF3B1:chr2:198266512:C/T')
RHP.mutations = c('NRAS' = 'NRAS:chr1:115258745:C/G', 'SF3B1' = 'SF3B1:chr2:198266512:C/T')
DP1 = as.data.frame(data.table::fread('./data/coevolution/1026_1/DP.csv'))
DP1$Barcode = paste0('AML1026.1#', DP1$Barcode)
DP1[DP1 == 0] = NA
DP3 = as.data.frame(data.table::fread('./data/coevolution/1026_3/DP.csv'))
DP3$Barcode = paste0('AML1026.3#', DP3$Barcode)
DP3[DP3 == 0] = NA
DP = rbind(DP1[c('Sample', 'Barcode', colnames(AML1026.vafs))], DP3[c('Sample', 'Barcode', colnames(AML1026.vafs))])
cells.plot = DP$Barcode[which(complete.cases(DP[,as.character(RHP.mutations)]))]
VARIANT_CUTOFF = 10
variant.df = data.frame(variants.1 = rowMeans(AML1026.vafs.combined[,variants.1]),
variants.2 = rowMeans(AML1026.vafs.combined[,variants.2]),
barcode = rownames(AML1026.vafs))
variant.df$annotation = 'none'
variant.df$annotation[which(variant.df$variants.1 > VARIANT_CUTOFF & variant.df$variants.2 > VARIANT_CUTOFF)] = 'doublet'
variant.df$annotation[which(variant.df$variants.1 > VARIANT_CUTOFF & variant.df$variants.2 < VARIANT_CUTOFF)] = 'variant1'
variant.df$annotation[which(variant.df$variants.1 < VARIANT_CUTOFF & variant.df$variants.2 > VARIANT_CUTOFF)] = 'variant2'
variant.df = variant.df[cells.plot,]
ha = HeatmapAnnotation(variant = c(variant.df$annotation[which(variant.df$annotation == 'variant1')],
variant.df$annotation[which(variant.df$annotation == 'variant2')]),
col = list(variant = c('variant1' = 'orange', 'variant2' = 'purple')),
annotation_legend_param = list(variant = list(title = 'Individual')), border = T)
col_fun = circlize::colorRamp2(breaks = seq(0,1,1/8), colors = BuenColors::jdb_palette(name = 'solar_rojos', n=9))
svglite::svglite('./figure_coevolution/AML/figures/20220212_AML1026_variants_heatmap.svg', width = 5, height = 4)
Heatmap(t(AML1026.vafs.combined[c(variant.df$barcode[which(variant.df$annotation == 'variant1')],
variant.df$barcode[which(variant.df$annotation == 'variant2')]),c(variants.1, variants.2)]),
top_annotation = ha, raster_quality = 10, use_raster = T, border = T,
cluster_rows = T, cluster_columns = F, show_column_names = F, show_row_names = T,
show_column_dend = F, show_row_dend = F, row_names_gp = gpar(fontsize=8))
dev.off()
cluster.colors = c('HSC' = RColorBrewer::brewer.pal(name = 'YlOrRd', n = 5)[5],
'Progenitor' = RColorBrewer::brewer.pal(name = 'YlOrRd', n = 5)[4],
'Mono' = RColorBrewer::brewer.pal(name = 'YlOrRd', n = 5)[3],
'Erythroid' = RColorBrewer::brewer.pal(name = 'YlOrRd', n = 5)[2],
'CD4' = 'lightblue',
'CD8' = 'darkblue',
'Plasma' = 'darkgreen')
so.13 = readRDS('./data/objects/20220112_AML1026.rds')
so.13 = readRDS('./data/coevolution/objects/20220112_AML1026.rds')
# just look at recipient-derived cells
cluster.colors = c('HSC' = RColorBrewer::brewer.pal(name = 'YlOrRd', n = 5)[5],
'Progenitor' = RColorBrewer::brewer.pal(name = 'YlOrRd', n = 5)[4],
'Mono' = RColorBrewer::brewer.pal(name = 'YlOrRd', n = 5)[3],
'Erythroid' = RColorBrewer::brewer.pal(name = 'YlOrRd', n = 5)[2],
'CD4' = 'lightblue',
'CD8' = 'darkblue',
'Plasma' = 'darkgreen')
so.13 = readRDS('./data/coevolution/objects/20220112_AML1026.rds')
so.13 = RenameCells(so.13, new.names = paste0('AML', colnames(so.13)))
variant.df$manual.cluster = so.13$manual.cluster[rownames(variant.df)]
vafs = AML1026.vafs.combined[variant.df$barcode[which(variant.df$annotation == 'variant1')],
c(RHP.mutations, colnames(AML1026.vafs.combined)[which(grepl('>',colnames(AML1026.vafs.combined)))])]
vafs[, which(!colnames(vafs) %in% RHP.mutations)] = 10*vafs[, which(!colnames(vafs) %in% RHP.mutations)]
col_fun = circlize::colorRamp2(breaks = seq(0,100,100/8), colors = BuenColors::jdb_palette(name = 'solar_rojos', n=9))
svglite::svglite('./figure_coevolution/AML/figures/20220212_AML1026_mutations_heatmap.svg', width = 5, height = 1.5)
ha = HeatmapAnnotation(celltype = variant.df[rownames(vafs), 'manual.cluster'], col = list(celltype = cluster.colors),
border = T, simple_anno_size = unit(5, 'pt'), annotation_name_gp = gpar(fontsize=8), gp = gpar(fontsize=8),
annotation_legend_param = )
Heatmap(t(vafs[,unique(c(rev(RHP.mutations), '11736T>C'))]), top_annotation = ha, raster_quality = 10, use_raster = T, border = T,
cluster_rows = F, cluster_columns = F, show_column_names = F, show_row_names = T,
show_column_dend = F, show_row_dend = F, row_names_gp = gpar(fontsize=8), column_split = variant.df[rownames(vafs), 'manual.cluster'],
col = col_fun, column_title = paste0(nrow(vafs), ' cells'), column_title_side = 'bottom', column_title_gp = gpar(fontsize=8))
dev.off()
svglite::svglite('./figure_coevolution/AML/figures/20220212_AML1026_mutations_heatmap2.svg', width = 5, height = 1.5)
ha = HeatmapAnnotation(celltype = variant.df[rownames(vafs), 'manual.cluster'], col = list(celltype = cluster.colors),
border = T, simple_anno_size = unit(5, 'pt'), annotation_name_gp = gpar(fontsize=8), gp = gpar(fontsize=8),
annotation_legend_param = )
Heatmap(t(vafs[,unique(c(RHP.mutations))]), top_annotation = ha, raster_quality = 10, use_raster = T, border = T,
cluster_rows = F, cluster_columns = T, show_column_names = F, show_row_names = T,
show_column_dend = F, show_row_dend = F, row_names_gp = gpar(fontsize=8), column_split = variant.df[rownames(vafs), 'manual.cluster'],
col = col_fun, column_title = paste0(nrow(vafs), ' cells'), column_title_side = 'bottom', column_title_gp = gpar(fontsize=8))
dev.off()
DimPlot(so.13, group.by = 'annotation', cols = c('none' = 'grey', 'doublet' = 'black',
'variant1' = 'purple', 'variant2' = 'orange')) +
NoLegend() + NoAxes() + theme(plot.title = element_blank())
# visualize donor-recipient deconvolution on UMAP
p=DimPlot(so.13, group.by = 'annotation', cols = c('none' = 'grey', 'doublet' = 'black',
'variant1' = 'purple', 'variant2' = 'orange')) +
NoLegend() + NoAxes() + theme(plot.title = element_blank())
ggsave('./figure_coevolution/AML/figures/20230428_donor_recipient_UMAP.png', width = 4, height = 4, dpi = 600, plot = p)
cluster.colors = c('HSC' = RColorBrewer::brewer.pal(name = 'YlOrRd', n = 5)[5],
'Progenitor' = RColorBrewer::brewer.pal(name = 'YlOrRd', n = 5)[4],
'Mono' = RColorBrewer::brewer.pal(name = 'YlOrRd', n = 5)[3],
'Erythroid' = RColorBrewer::brewer.pal(name = 'YlOrRd', n = 5)[2],
'CD4' = 'lightblue',
'CD8' = 'darkblue',
'Plasma' = 'darkgreen')
# read data using helper functions
AML1026.1.vafs = read_vafs('./data/coevolution/1026_1/AF.csv', 'AML1026.1')
AML1026.3.vafs = read_vafs('./data/coevolution/1026_3/AF.csv', 'AML1026.3')
AML1026.1.depths = read_vafs('./data/coevolution/1026_1/DP.csv', 'AML1026.1')
AML1026.3.depths = read_vafs('./data/coevolution/1026_3/DP.csv', 'AML1026.3')
AML1026.1.vafs.combined = merge_with_mgatk(AML1026.1.vafs, './data/coevolution/vafs/20220211_AML1026.1_mtDNA_vafs.csv', 'AML1026.1', truncate_barcodes = T)
AML1026.3.vafs.combined = merge_with_mgatk(AML1026.3.vafs, './data/coevolution/vafs/20220211_AML1026.3_mtDNA_vafs.csv', 'AML1026.3', truncate_barcodes = T)
AML1026.vafs = rbind(AML1026.1.vafs[,intersect(colnames(AML1026.1.vafs), colnames(AML1026.3.vafs))],
AML1026.3.vafs[,intersect(colnames(AML1026.1.vafs), colnames(AML1026.3.vafs))])
AML1026.vafs.combined = rbind(AML1026.1.vafs.combined[,intersect(colnames(AML1026.1.vafs.combined), colnames(AML1026.3.vafs.combined))],
AML1026.3.vafs.combined[,intersect(colnames(AML1026.1.vafs.combined), colnames(AML1026.3.vafs.combined))])
AML1026.depths.combined = rbind(AML1026.1.depths[,intersect(colnames(AML1026.1.depths), colnames(AML1026.3.depths))],
AML1026.3.depths[,intersect(colnames(AML1026.1.depths), colnames(AML1026.3.depths))])
DP1 = as.data.frame(data.table::fread('./data/coevolution/1026_1/DP.csv'))
DP1$Barcode = paste0('AML1026.1#', DP1$Barcode)
DP1[DP1 == 0] = NA
DP3 = as.data.frame(data.table::fread('./data/coevolution/1026_3/DP.csv'))
DP3$Barcode = paste0('AML1026.3#', DP3$Barcode)
DP3[DP3 == 0] = NA
DP = rbind(DP1[c('Sample', 'Barcode', colnames(AML1026.vafs))], DP3[c('Sample', 'Barcode', colnames(AML1026.vafs))])
VARIANT_CUTOFF = 10
variant.df = data.frame(variants.1 = rowMeans(AML1026.vafs.combined[,variants.1]),
variants.2 = rowMeans(AML1026.vafs.combined[,variants.2]),
variants.mtDNA.1 = rowMeans(AML1026.vafs.combined[,variants.mtDNA.1]),
variants.mtDNA.2 = rowMeans(AML1026.vafs.combined[,variants.mtDNA.2]),
variants.somatic.1 = rowMeans(AML1026.vafs.combined[,variants.somatic.1]),
variants.somatic.2 = rowMeans(AML1026.vafs.combined[,variants.somatic.2]),
barcode = rownames(AML1026.vafs))
## separate deconvolution variants
# recipient
variants.mtDNA.1 = c('16304T>C', '4336T>C')
# donor
variants.mtDNA.2 = c('16294C>T', '16296C>T')
# recipient
variants.somatic.1 = c('NF1:chr17:29559932:C/A', 'TP53:chr17:7579801:G/C', 'TP53:chr17:7578115:T/C')
# donor
variants.somatic.2 = c('SF3B1:chr2:198267770:G/GAA',
'NPM1:chr5:170837457:A/G', 'KDM6A:chrX:44938563:G/A', 'DNMT3A:chr2:25463483:G/A',
'BRAF:chr7:140449071:C/G', 'FLT3:chr13:28592546:T/C', 'NF1:chr17:29483195:G/C')
VARIANT_CUTOFF = 10
variant.df = data.frame(variants.1 = rowMeans(AML1026.vafs.combined[,variants.1]),
variants.2 = rowMeans(AML1026.vafs.combined[,variants.2]),
variants.mtDNA.1 = rowMeans(AML1026.vafs.combined[,variants.mtDNA.1]),
variants.mtDNA.2 = rowMeans(AML1026.vafs.combined[,variants.mtDNA.2]),
variants.somatic.1 = rowMeans(AML1026.vafs.combined[,variants.somatic.1]),
variants.somatic.2 = rowMeans(AML1026.vafs.combined[,variants.somatic.2]),
barcode = rownames(AML1026.vafs))
variant.df$annotation = 'none'
variant.df$annotation[which(variant.df$variants.1 > VARIANT_CUTOFF & variant.df$variants.2 > VARIANT_CUTOFF)] = 'doublet'
variant.df$annotation[which(variant.df$variants.1 > VARIANT_CUTOFF & variant.df$variants.2 < VARIANT_CUTOFF)] = 'recipient'
variant.df$annotation[which(variant.df$variants.1 < VARIANT_CUTOFF & variant.df$variants.2 > VARIANT_CUTOFF)] = 'donor'
variant.df$annotation.somatic = 'none'
variant.df$annotation.somatic[which(variant.df$variants.somatic.1 > VARIANT_CUTOFF & variant.df$variants.somatic.2 > VARIANT_CUTOFF)] = 'doublet'
variant.df$annotation.somatic[which(variant.df$variants.somatic.1 > VARIANT_CUTOFF & variant.df$variants.somatic.2 < VARIANT_CUTOFF)] = 'recipient'
variant.df$annotation.somatic[which(variant.df$variants.somatic.1 < VARIANT_CUTOFF & variant.df$variants.somatic.2 > VARIANT_CUTOFF)] = 'donor'
variant.df$annotation.mtDNA = 'none'
variant.df$annotation.mtDNA[which(variant.df$variants.mtDNA.1 > 20 & variant.df$variants.mtDNA.2 > 20)] = 'doublet'
variant.df$annotation.mtDNA[which(variant.df$variants.mtDNA.1 > 80 & variant.df$variants.mtDNA.2 < 20)] = 'recipient'
variant.df$annotation.mtDNA[which(variant.df$variants.mtDNA.1 < 20 & variant.df$variants.mtDNA.2 > 80)] = 'donor'
ggplot(variant.df, aes(x=variants.mtDNA.1, y=variants.mtDNA.2)) +
ggrastr::rasterize(geom_point(aes(color=annotation.mtDNA), size=0.5), dpi=600) +
scale_x_continuous('% mtDNA recipient') +
scale_y_continuous('% mtDNA donor') +
scale_color_manual(values = c('none' = 'grey', 'doublet' = 'black', recipient = 'orange', donor = 'purple')) +
geom_hline(yintercept = c(20,80)) +
geom_vline(xintercept = c(20,80)) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text('Arial', size=10, color='black'),
axis.title = element_text('Arial', size=10, color='black'))
ggsave('./figure_coevolution/AML/figures/20230428_donor_recipient_mtDNA.svg', width = 1.5, height = 1.5)
ggplot(variant.df, aes(x=variants.somatic.1, y=variants.somatic.2)) +
ggrastr::rasterize(geom_point(aes(color=annotation.somatic), size=0.5), dpi=600) +
scale_x_continuous('% VAF recipient') +
scale_y_continuous('% VAF donor') +
scale_color_manual(values = c('none' = 'grey', 'doublet' = 'black', recipient = 'orange', donor = 'purple')) +
geom_hline(yintercept = c(10)) +
geom_vline(xintercept = c(10)) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text('Arial', size=10, color='black'),
axis.title = element_text('Arial', size=10, color='black'))
ggplot(variant.df, aes(x=variants.somatic.1, y=variants.somatic.2)) +
ggrastr::rasterize(geom_point(aes(color=annotation.somatic), size=0.5), dpi=600) +
scale_x_continuous('% VAF recipient') +
scale_y_continuous('% VAF donor') +
scale_color_manual(values = c('none' = 'grey', 'doublet' = 'black', recipient = 'orange', donor = 'purple')) +
geom_hline(yintercept = c(10)) +
geom_vline(xintercept = c(10)) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text('Arial', size=10, color='black'),
axis.title = element_text('Arial', size=10, color='black'))
ggsave('./figure_coevolution/AML/figures/20230428_donor_recipient_somatic_mutation.svg', width = 1.5, height = 1.5)
recipient.cells = rownames(variant.df)[which(variant.df$annotation.mtDNA == 'recipient')]
recipient.cells = recipient.cells[sample(length(recipient.cells), 100)]
donor.cells = rownames(variant.df)[which(variant.df$annotation.mtDNA == 'donor')]
donor.cells = donor.cells[sample(length(donor.cells), 100)]
none.cells = rownames(variant.df)[which(variant.df$annotation.mtDNA == 'none')]
doublet.cells = rownames(variant.df)[which(variant.df$annotation.mtDNA == 'doublet')]
col_fun = circlize::colorRamp2(breaks = seq(0,100,100/8), colors = BuenColors::jdb_palette(name = 'solar_rojos'))
ha = columnAnnotation(annotation = variant.df[c(recipient.cells, donor.cells, none.cells, doublet.cells),
'annotation.mtDNA'],
col = list('annotation' = c('none' = 'grey', 'doublet' = 'black',
'recipient' = 'orange', 'donor' = 'purple')),
simple_anno_size = unit(5, 'pt'),
border=T)
svglite::svglite('./figure_coevolution/AML/figures/20230428_donor_recipient_heatmap.svg', width = 4, height = 2)
Heatmap(t(AML1026.vafs.combined[c(recipient.cells, donor.cells, none.cells, doublet.cells),
c(variants.mtDNA.1, variants.mtDNA.2, variants.somatic.1, variants.somatic.2)]),
show_row_dend = F, show_column_dend = F, cluster_rows = F, cluster_columns = F,
show_row_names = F, show_column_names = F,
column_split = factor(variant.df[c(recipient.cells, donor.cells, none.cells, doublet.cells), 'annotation.mtDNA'],
levels = c('recipient', 'donor', 'doublet', 'none')),
col = col_fun, border=T, row_split = factor(c(rep('mtDNA', 4), rep('somatic', 10)),
levels = c('mtDNA', 'somatic')),
top_annotation = ha, use_raster = T, raster_quality = 10)
dev.off()
df = data.frame()
for (mtDNA.annotation in unique(variant.df$annotation.mtDNA)) {
for (somatic.annotation in unique(variant.df$annotation.somatic)) {
df = rbind(df, data.frame(mtDNA.annotation = mtDNA.annotation,
somatic.annotation = somatic.annotation,
cells = length(which(variant.df$annotation.mtDNA == mtDNA.annotation &
variant.df$annotation.somatic == somatic.annotation))))
}
}
so.13 = readRDS('./data/coevolution/objects/20220112_AML1026.rds')
so.13 = RenameCells(so.13, new.names = paste0('AML', colnames(so.13)))
df = data.frame(bc = rownames(AML1026.vafs.combined),
NRAS.depth = AML1026.depths.combined$`NRAS:chr1:115258745:C/G`,
NRAS = AML1026.vafs.combined$`NRAS:chr1:115258745:C/G`,
SF3B1.depth = AML1026.depths.combined$`SF3B1:chr2:198266512:C/T`,
SF3B1 = AML1026.vafs.combined$`SF3B1:chr2:198266512:C/T`)
rownames(df) = df$bc
df$annotation.mtDNA = variant.df[rownames(df), 'annotation.mtDNA']
df$manual.cluster = so.13$manual.cluster[df$bc]
df$sample = so.13$orig.ident[df$bc]
stats = df %>% filter(df$annotation.mtDNA %in% c('recipient')) %>%
group_by(sample, manual.cluster) %>%
summarize(NRAS.mut = length(which(NRAS != 0)),
NRAS.wt = length(which(NRAS == 0)),
SF3B1.mut = length(which(SF3B1 != 0)),
SF3B1.wt = length(which(SF3B1 == 0)))
stats$NRAS.freq = stats$NRAS.mut / (stats$NRAS.mut + stats$NRAS.wt)
stats$SF3B1.freq = stats$SF3B1.mut / (stats$SF3B1.mut + stats$SF3B1.wt)
stats = stats %>% tidyr::pivot_longer(names_to = 'gene', values_to = 'freq', cols = c('SF3B1.freq', 'NRAS.freq'))
stats$sample.gene = factor(paste0(stats$sample, '.', stats$gene),
levels = c('1026.1.NRAS.freq', '1026.3.NRAS.freq',
'1026.1.SF3B1.freq', '1026.3.SF3B1.freq'))
ggplot(stats[which(stats$manual.cluster %ni% c('CD4', 'CD8', 'Plasma')),],
aes(x=sample.gene, y=100*freq, color=manual.cluster)) +
geom_point() +
geom_line(aes(group=manual.cluster)) +
scale_x_discrete(labels = c('Screening', 'Treatment', 'Screening', 'Treatment')) +
scale_y_continuous('% recipient positive', limits = c(0,100)) +
scale_color_manual(values = cluster.colors) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text('Arial', size=10, color='black'),
axis.title = element_text('Arial', size=10, color='black'),
axis.title.x = element_blank(),
axis.text.x = element_text(angle=90, vjust=0.5, hjust=1))
'%ni%' <- function(x,y)!('%in%'(x,y))
df = data.frame(bc = rownames(AML1026.vafs.combined),
NRAS.depth = AML1026.depths.combined$`NRAS:chr1:115258745:C/G`,
NRAS = AML1026.vafs.combined$`NRAS:chr1:115258745:C/G`,
SF3B1.depth = AML1026.depths.combined$`SF3B1:chr2:198266512:C/T`,
SF3B1 = AML1026.vafs.combined$`SF3B1:chr2:198266512:C/T`)
rownames(df) = df$bc
df$annotation.mtDNA = variant.df[rownames(df), 'annotation.mtDNA']
df$manual.cluster = so.13$manual.cluster[df$bc]
df$sample = so.13$orig.ident[df$bc]
stats = df %>% filter(df$annotation.mtDNA %in% c('recipient')) %>%
group_by(sample, manual.cluster) %>%
summarize(NRAS.mut = length(which(NRAS != 0)),
NRAS.wt = length(which(NRAS == 0)),
SF3B1.mut = length(which(SF3B1 != 0)),
SF3B1.wt = length(which(SF3B1 == 0)))
stats$NRAS.freq = stats$NRAS.mut / (stats$NRAS.mut + stats$NRAS.wt)
stats$SF3B1.freq = stats$SF3B1.mut / (stats$SF3B1.mut + stats$SF3B1.wt)
stats = stats %>% tidyr::pivot_longer(names_to = 'gene', values_to = 'freq', cols = c('SF3B1.freq', 'NRAS.freq'))
stats$sample.gene = factor(paste0(stats$sample, '.', stats$gene),
levels = c('1026.1.NRAS.freq', '1026.3.NRAS.freq',
'1026.1.SF3B1.freq', '1026.3.SF3B1.freq'))
ggplot(stats[which(stats$manual.cluster %ni% c('CD4', 'CD8', 'Plasma')),],
aes(x=sample.gene, y=100*freq, color=manual.cluster)) +
geom_point() +
geom_line(aes(group=manual.cluster)) +
scale_x_discrete(labels = c('Screening', 'Treatment', 'Screening', 'Treatment')) +
scale_y_continuous('% recipient positive', limits = c(0,100)) +
scale_color_manual(values = cluster.colors) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text('Arial', size=10, color='black'),
axis.title = element_text('Arial', size=10, color='black'),
axis.title.x = element_blank(),
axis.text.x = element_text(angle=90, vjust=0.5, hjust=1))
ggsave('./figure_coevolution/AML/figures/20230428_SF3B1_NRAS.svg', width = 1.3, height = 1.5)
stats.filtered = df %>% filter(df$annotation.mtDNA %in% c('recipient')) %>%
group_by(sample, manual.cluster) %>%
summarize(NRAS.mut = length(which(NRAS != 0 & NRAS.depth >= 10)),
NRAS.wt = length(which(NRAS == 0 & NRAS.depth >= 10)),
SF3B1.mut = length(which(SF3B1 != 0 & SF3B1.depth >= 10)),
SF3B1.wt = length(which(SF3B1 == 0 & SF3B1.depth >= 10)))
stats.filtered$NRAS.freq = stats.filtered$NRAS.mut / (stats.filtered$NRAS.mut + stats.filtered$NRAS.wt)
stats.filtered$SF3B1.freq = stats.filtered$SF3B1.mut / (stats.filtered$SF3B1.mut + stats.filtered$SF3B1.wt)
stats.filtered = stats.filtered %>% tidyr::pivot_longer(names_to = 'gene', values_to = 'freq', cols = c('SF3B1.freq', 'NRAS.freq'))
stats.filtered$sample.gene = factor(paste0(stats.filtered$sample, '.', stats.filtered$gene),
levels = c('1026.1.NRAS.freq', '1026.3.NRAS.freq',
'1026.1.SF3B1.freq', '1026.3.SF3B1.freq'))
ggplot(stats.filtered[which(stats.filtered$manual.cluster %ni% c('CD4', 'CD8', 'Plasma')),],
aes(x=sample.gene, y=100*freq, color=manual.cluster)) +
geom_point() +
geom_line(aes(group=manual.cluster)) +
scale_x_discrete(labels = c('Screening', 'Treatment', 'Screening', 'Treatment')) +
scale_y_continuous('% recipient positive', limits = c(0,100)) +
scale_color_manual(values = cluster.colors) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text('Arial', size=10, color='black'),
axis.title = element_text('Arial', size=10, color='black'),
axis.title.x = element_blank(),
axis.text.x = element_text(angle=90, vjust=0.5, hjust=1))
ggplot(stats.filtered[which(stats.filtered$manual.cluster %ni% c('CD4', 'CD8', 'Plasma')),],
aes(x=sample.gene, y=100*freq, color=manual.cluster)) +
geom_point() +
geom_line(aes(group=manual.cluster)) +
scale_x_discrete(labels = c('Screening', 'Treatment', 'Screening', 'Treatment')) +
scale_y_continuous('% recipient positive', limits = c(0,100)) +
scale_color_manual(values = cluster.colors) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text('Arial', size=10, color='black'),
axis.title = element_text('Arial', size=10, color='black'),
axis.title.x = element_blank(),
axis.text.x = element_text(angle=90, vjust=0.5, hjust=1))
ggsave('./figure_coevolution/AML/figures/20230428_SF3B1_NRAS_filtered.svg', width = 1.3, height = 1.5)
ggplot(stats[which(stats$manual.cluster %ni% c('CD4', 'CD8', 'Plasma')),],
aes(x=sample.gene, y=100*freq, color=manual.cluster)) +
geom_point() +
geom_line(aes(group=manual.cluster)) +
scale_x_discrete(labels = c('Screening', 'Treatment', 'Screening', 'Treatment')) +
scale_y_continuous('% recipient positive', limits = c(0,100)) +
scale_color_manual(values = cluster.colors) +
theme_classic() +
theme(legend.position = 'none',
axis.text = element_text('Arial', size=10, color='black'),
axis.title = element_text('Arial', size=10, color='black'),
axis.title.x = element_blank(),
axis.text.x = element_text(angle=90, vjust=0.5, hjust=1))
ggsave('./figure_coevolution/AML/figures/20230428_SF3B1_NRAS.svg', width = 1.3, height = 1.5)
